require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe IdeasController do

  login_user

  describe "GET show" do
    it "assigns the requested idea as @idea" do
      idea = FactoryGirl.create(:idea)
      get :show, topic_id: idea.topic.id, :id => idea.id
      assigns(:idea).should eq(idea)
    end
  end

  describe "GET new" do
    it "assigns a new idea as @idea" do
      topic = FactoryGirl.create(:topic)
      get :new, topic_id: topic.id
      assigns(:idea).should be_a_new(Idea)
    end
  end

  describe "GET edit" do
    before(:each) do
      @idea = FactoryGirl.create(:idea)
    end

    it "assigns the requested idea as @idea" do
      get :edit, :id => @idea.id, topic_id: @idea.topic.id
      assigns(:idea).should eq(@idea)
    end

    it "redirects to root_path if not authorized" do
      get :edit, :id => @idea.id, topic_id: @idea.topic.id
      response.should redirect_to(root_path)
    end

    it "should succeed if topic owner" do
      controller.stub :current_user => @idea.topic.owner
      get :edit, :id => @idea.id, topic_id: @idea.topic.id
      response.should be_success
    end

    it "should succeed if topic contributor and idea owner" do
      controller.stub :current_user => @idea.user
      @idea.topic.users << @idea.user
      get :edit, :id => @idea.id, topic_id: @idea.topic.id
      response.should be_success
    end

    it "redirects if topic contributor but not idea owner" do
      controller.stub :current_user => @idea.user
      get :edit, :id => @idea.id, topic_id: @idea.topic.id
      response.should redirect_to(root_path)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      before(:each) do
        @idea_attr = FactoryGirl.attributes_for(:idea)
        @topic = FactoryGirl.create(:topic)

        Notifier.stub_chain :new_idea, :deliver
      end

      it "creates a new Idea" do
        expect {
          post :create, idea: @idea_attr, topic_id: @topic.id
        }.to change(Idea, :count).by(1)
      end

      it "belongs to the current user" do
        user = FactoryGirl.create(:user)
        controller.stub current_user: user
        post :create, idea: @idea_attr, topic_id: @topic.id
        assigns(:idea).user.should eq(user)
      end

      it "assigns a newly created idea as @idea" do
        post :create, :idea => @idea_attr, topic_id: @topic.id
        assigns(:idea).should be_a(Idea)
        assigns(:idea).should be_persisted
      end

      it "redirects to the created idea" do
        post :create, :idea => @idea_attr, topic_id: @topic.id
        response.should redirect_to(topic_path(@topic))
      end
    end

    describe "with invalid params" do
      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Idea.any_instance.stub(:save).and_return(false)
        post :create, :idea => {}, topic_id: FactoryGirl.create(:topic).id
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      before(:each) do
        @idea = FactoryGirl.create(:idea)
      end
      it "updates the requested idea" do
        Idea.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {topic_id: @idea.topic.id, id: @idea.to_param, :idea => {'these' => 'params'}}
      end

      it "assigns the requested idea as @idea" do
        put :update, {topic_id: @idea.topic.id, id: @idea.to_param, :idea => attributes_for(:idea)}
        assigns(:idea).should eq(@idea)
      end

      it "redirects to the idea" do
        put :update, {topic_id: @idea.topic.id, id: @idea.to_param, :idea => attributes_for(:idea)}
        response.should redirect_to(@idea.topic)
      end
    end

    describe "with invalid params" do
      it "re-renders the 'edit' template" do
        idea = FactoryGirl.create(:idea)
        # Trigger the behavior that occurs when invalid params are submitted
        Idea.any_instance.stub(:save).and_return(false)
        put :update, {topic_id: idea.topic.id, id: idea.to_param, idea: {}}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested idea" do
      idea = FactoryGirl.create(:idea)
      expect {
        delete :destroy, {topic_id: idea.topic.id, :id => idea.to_param}
      }.to change(Idea, :count).by(-1)
    end

    it "redirects to the ideas list" do
      idea = FactoryGirl.create(:idea)
      delete :destroy, {topic_id: idea.topic.id, :id => idea.to_param}
      response.should redirect_to(idea.topic)
    end
  end

end
